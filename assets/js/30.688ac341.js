(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{346:function(a,e,n){"use strict";n.r(e);var t=n(28),i=Object(t.a)({},(function(){var a=this,e=a.$createElement,n=a._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[n("h3",{attrs:{id:"前端缓存"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#前端缓存"}},[a._v("#")]),a._v(" 前端缓存")]),a._v(" "),n("h4",{attrs:{id:"_1-缓存过程分析"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-缓存过程分析"}},[a._v("#")]),a._v(" 1 缓存过程分析")]),a._v(" "),n("p",[a._v("浏览器发起 HTTP 请求 – 服务器响应该请求。那么浏览器第一次向服务器发起该请求后拿到请求结果，会根据响应报文中 HTTP 头的缓存标识，决定是否缓存结果，是则将请求结果和缓存标识存入浏览器缓存中。\n![缓存过程]['./image/huancun.png']")]),a._v(" "),n("h4",{attrs:{id:"前端之强制缓存过程"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#前端之强制缓存过程"}},[a._v("#")]),a._v(" 前端之强制缓存过程")]),a._v(" "),n("p",[a._v("强制缓存就是向浏览器缓存查找该请求结果，并根据该结果的缓存规则来决定是否使用该缓存结果的过程，强制缓存的情况主要有三种。")]),a._v(" "),n("ol",[n("li",[a._v("不存在该缓存结果和缓存标识，强制缓存失效\n![强制缓存失效]['./image/huancun1.png']")]),a._v(" "),n("li",[a._v("存在该缓存结果和缓存标识，但该结果已失效，强制缓存失效，则使用协商缓存\n![强制缓存失效，使用协商缓存]['./image/huancun2.png']")]),a._v(" "),n("li",[a._v("存在该缓存结果和缓存标识，且该结果尚未失效，强制缓存生效\n![强制缓存失效，使用协商缓存]['./image/huancun3.png']")])]),a._v(" "),n("h4",{attrs:{id:"前端之强制缓存标识"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#前端之强制缓存标识"}},[a._v("#")]),a._v(" 前端之强制缓存标识")]),a._v(" "),n("ol",[n("li",[a._v("Expires\n"),n("ul",[n("li",[a._v("原理：Expires 是 HTTP/1.0 控制网页缓存的字段，其值为服务器返回该请求结果缓存的到期时间，即再次发起该请求时，如果客户端的时间小于 Expires 的值时，直接使用缓存结果。")]),a._v(" "),n("li",[a._v("缺点：那么如果客户端与服务端的时间因为某些原因（例如时区不同；客户端和服务端有一方的时间不准确）发生误差，那么强制缓存则会直接失效，这样的话强制缓存的存在则毫无意义")])])]),a._v(" "),n("li",[a._v("Cache-Control\nCache-Control 为 max-age=600，是相对值。由于 Cache-Control 的优先级比 expires，那么直接根据 Cache-Control 的值进行缓存，意思就是说在 600 秒内再次发起该请求，则会直接使用缓存结果，强制缓存生效。")]),a._v(" "),n("li",[a._v("强制缓存的标志\n状态码为灰色的请求则代表使用了强制缓存，请求对应的 Size 值则代表该缓存存放的位置，分别为 from memory cache（浏览器会在 js 和图片等文件解析执行后直接存入内存缓存中，那么当刷新页面时只需直接从内存缓存中读取） 和 from disk cache（而 css 文件则会存入硬盘文件中，所以每次渲染页面都需要从硬盘读取缓存）。")])]),a._v(" "),n("h4",{attrs:{id:"前端之协商缓存过程"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#前端之协商缓存过程"}},[a._v("#")]),a._v(" 前端之协商缓存过程")]),a._v(" "),n("p",[a._v("协商缓存就是强制缓存失效后，浏览器携带缓存标识向服务器发起请求，由服务器根据缓存标识决定是否使用缓存的过程，主要有以下两种情况：")]),a._v(" "),n("ol",[n("li",[a._v("协商缓存生效\n![协商缓存失效]['./image/huancun4.png']")]),a._v(" "),n("li",[a._v("协商缓存生效\n![协商缓存生效]['./image/huancun5.png']")])]),a._v(" "),n("h4",{attrs:{id:"前端之协商缓存标志"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#前端之协商缓存标志"}},[a._v("#")]),a._v(" 前端之协商缓存标志")]),a._v(" "),n("ol",[n("li",[n("p",[a._v("Last-Modified / If-Modified-Since\nLast-Modified 是服务器响应请求时，返回该资源文件在服务器最后被修改的时间，If-Modified-Since 则是客户端再次发起该请求时，携带上次请求返回的 Last-Modified 值，通过此字段值告诉服务器该资源上次请求返回的最后被修改时间。服务器收到该请求，发现请求头含有 If-Modified-Since 字段，则会根据 If-Modified-Since 的字段值与该资源在服务器的最后被修改时间做对比，若服务器的资源最后被修改时间大于 If-Modified-Since 的字段值，则重新返回资源，状态码为 200；否则则返回 304，代表资源无更新，可继续使用缓存文件\n![协商缓存Last-Modified]['./image/huancun6.png']\n![协商缓存If-Modified-Since]['./image/huancun7.png']")])]),a._v(" "),n("li",[n("p",[a._v("Etag / If-None-Match\nEtag 是服务器响应请求时，返回当前资源文件的一个唯一标识(由服务器生成)。If-None-Match 是客户端再次发起该请求时，携带上次请求返回的唯一标识 Etag 值，通过此字段值告诉服务器该资源上次请求返回的唯一标识值。服务器收到该请求后，发现该请求头中含有 If-None-Match，则会根据 If-None-Match 的字段值与该资源在服务器的 Etag 值做对比，一致则返回 304，代表资源无更新，继续使用缓存文件；不一致则重新返回资源文件，状态码为 200\n![协商缓存Etag]['./image/huancun8.png']\n![协商缓存If-None-Match]['./image/huancun9.png']")])])]),a._v(" "),n("h4",{attrs:{id:"缓存总结"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#缓存总结"}},[a._v("#")]),a._v(" 缓存总结")]),a._v(" "),n("p",[a._v("![缓存总结]['./image/huancun10.png']")]),a._v(" "),n("h4",{attrs:{id:"外部借鉴"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#外部借鉴"}},[a._v("#")]),a._v(" 外部借鉴")]),a._v(" "),n("p",[n("a",{attrs:{href:"https://juejin.im/entry/6844903593275817998",target:"_blank",rel:"noopener noreferrer"}},[a._v("外部借鉴"),n("OutboundLink")],1)])])}),[],!1,null,null,null);e.default=i.exports}}]);